// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const createCatboxAuth = `-- name: CreateCatboxAuth :one
INSERT INTO catbox_auth (
  catbox_userhash
) VALUES ( 
    ?
)
RETURNING id, catbox_userhash
`

func (q *Queries) CreateCatboxAuth(ctx context.Context, catboxUserhash string) (CatboxAuth, error) {
	row := q.db.QueryRowContext(ctx, createCatboxAuth, catboxUserhash)
	var i CatboxAuth
	err := row.Scan(&i.ID, &i.CatboxUserhash)
	return i, err
}

const deleteCatboxAuth = `-- name: DeleteCatboxAuth :exec
DELETE FROM catbox_auth
WHERE id = ?
`

func (q *Queries) DeleteCatboxAuth(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCatboxAuth, id)
	return err
}

const getCatboxAuth = `-- name: GetCatboxAuth :one
SELECT id, catbox_userhash FROM catbox_auth
WHERE ID = ? LIMIT 1
`

func (q *Queries) GetCatboxAuth(ctx context.Context, id int64) (CatboxAuth, error) {
	row := q.db.QueryRowContext(ctx, getCatboxAuth, id)
	var i CatboxAuth
	err := row.Scan(&i.ID, &i.CatboxUserhash)
	return i, err
}

const updateCatboxAuth = `-- name: UpdateCatboxAuth :exec
UPDATE catbox_auth
set catbox_userhash = ?
WHERE ID = ?
RETURNING id, catbox_userhash
`

type UpdateCatboxAuthParams struct {
	CatboxUserhash string
	ID             int64
}

func (q *Queries) UpdateCatboxAuth(ctx context.Context, arg UpdateCatboxAuthParams) error {
	_, err := q.db.ExecContext(ctx, updateCatboxAuth, arg.CatboxUserhash, arg.ID)
	return err
}
